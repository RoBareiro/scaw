package ar.edu.unlam.diit.scaw.daos.impl;

import java.sql.Connection;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;
import java.sql.Statement;
import ar.edu.unlam.diit.scaw.configs.HsqlDataSource;
import ar.edu.unlam.diit.scaw.daos.PersonDao;
import ar.edu.unlam.diit.scaw.entities.Person;

public class PersonDaoImpl implements PersonDao {

	HsqlDataSource dataSource = new HsqlDataSource();
	Connection conn;

	public PersonDaoImpl() {
		super();
		
		// Eventualmente si se quiere crear la tabla en la primer ejecuci√≥n
		
		try {
			conn = (dataSource.dataSource()).getConnection();
		
			Statement query;
			
			query = conn.createStatement();
		    /*query.executeUpdate("DROP TABLE PERSON IF EXISTS;");	Borramos el drop xq al agregar borra lo anterior*/
			query.executeUpdate("CREATE TABLE PERSON (ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, USUARIO VARCHAR(30), CLAVE VARCHAR(30), EMAIL VARCHAR(50));");
			
			

			/*query.executeUpdate("INSERT INTO person (USUARIO, CLAVE, EMAIL) VALUES ('Cintia', 'Gioia', 'cgioia@unlam.edu.ar');");
			query.executeUpdate("INSERT INTO person (USUARIO, CLAVE, EMAIL) VALUES ('Walter', 'Ureta', 'wureta@unlam.edu.ar');");
			query.executeUpdate("INSERT INTO person (USUARIO, CLAVE, EMAIL) VALUES ('Juan', 'Monteagudo', 'jmonteagudo@unlam.edu.ar');");
			*/
			
			
			conn.close();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

	@Override
	public void save(Person person) {

		try {
			conn = (dataSource.dataSource()).getConnection();
		
			Statement query;
			
			query = conn.createStatement();		
			query.executeUpdate("INSERT INTO person (USUARIO, CLAVE, EMAIL) VALUES ('" + person.getUsuario() + "', '" + person.getClave() + "', '" + person.getEmail() + "');");
			/*ACA es donde hay que crear las querys para comparar si existe el usuario*/
			query.executeUpdate("SELECT USUARIO FROM PERSON");
			
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}		
	}

	@Override
	public List<Person> findAll() {
		List<Person> ll = new LinkedList<Person>();
		
		try {
			conn = (dataSource.dataSource()).getConnection();
		
			Statement query;
			
			query = conn.createStatement();
			
			ResultSet rs = query.executeQuery("SELECT * FROM PERSON");
	
			while (rs.next()) {
			  int id = rs.getInt("ID");
			  String usuario = rs.getString("USUARIO");
			  String clave = rs.getString("CLAVE");
			  String email = rs.getString("EMAIL");
			  
			  Person person = new Person();
			  person.setId(id);
			  person.setUsuario (usuario);
			  person.setClave(clave);
			  person.setEmail(email);
	
			  ll.add(person);
			}
			
			conn.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ll;
	}
}
